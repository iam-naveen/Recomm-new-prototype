// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  Google
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String       @unique
  provider          AuthProvider
  bids              Bid[]
  listedProducts    Product[]    @relation(name: "listedProducts")
  purchasedProducts Product[]    @relation(name: "purchasedProducts")
  favorites         Product[]    @relation(name: "favorites", fields: [favoriteIds], references: [id])
  favoriteIds       String[]     @db.ObjectId
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  picture   String
  models    Model[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Model {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  brand       Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     String     @db.ObjectId
  products    Product[]
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  picture   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modelIds  String[] @db.ObjectId
  models    Model[]  @relation(fields: [modelIds], references: [id])
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  price           Float
  description     String
  pictures        String[]
  model           Model    @relation(fields: [modelId], references: [id])
  modelId         String   @db.ObjectId
  owner           User     @relation("listedProducts", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String   @db.ObjectId
  buyer           User?    @relation("purchasedProducts", fields: [buyerId], references: [id])
  buyerId         String?  @db.ObjectId
  room            Room?
  favoritedUser   User[]   @relation(name: "favorites", fields: [favoritedUserId], references: [id])
  favoritedUserId String[] @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  bids       Bid[]
  duration   Float    @default(1440)
  createdAt  DateTime @default(now())
  highestBid Float?
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @unique @db.ObjectId
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  price     Float
  Room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}
